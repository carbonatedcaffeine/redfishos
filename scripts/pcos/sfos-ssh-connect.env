#!/bin/sh
################################################################################
#
# Copyright (C) 2023, Roberto A. Foglietta <roberto.foglietta@gmail.com>
#                     Released under GPLv2 license terms
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
################################################################################
#
# INSTALLATION:
#
# save this file in /usr/bin/sfos-ssh-connect.env as text file not as a script
#
# add this line to the end of your ~/.bashrc for the future bash instances:
#
#    source /usr/bin/sfos-ssh-connect.env
#
# and / or manually load into the current bash instance in the same way above.
#
# USAGE:
#
# tfish [command] - to use recovery telnet via USB on its default IPv4
# rfish [command] - to use recovery SSH via USB on its default IPv4
# ufish [command] - to use SSH via USB connection on its default IPv4
# wfish [command] - to use SSH via WiFi connection on its default IPv4
# afish [command] - to use the fast route IPv4 for SSH, updates IPv4 default
# sfish [command] - to use the previous route for SSH or it finds the fastest
#
# scp support:
#
# s/afish [scp] -u $remote-dest-path $local-files - secure copy in upload
# s/afish [scp] -d $local-dest-path $remote-files - secure copy in download
#
# extras:
#
# afish getip - set the fastest route IPv4 for establishing the SSH connection
# ufish devtether - enable the tethering via USB when SFOS is in developer mode
#
################################################################################
# release: 0.1.5

export sfos_ipaddr=""
export ssh_opts="-o ConnectTimeout=5 -o StrictHostKeyChecking=no"

export sfos_ip_addr_u=${sfos_ip_addr_u:-192.168.2.15}
export sfos_ip_addr_t=${sfos_ip_addr_t:-172.28.172.1}
export sfos_ip_addr_r=${sfos_ip_addr_r:-10.42.66.66}

ufish() {
    if [  "${1:-}" = "devtether" ]; then
        ufish_devtether
        return $?
    fi
    ssh $ssh_opts root@${sfos_ip_addr_u} "$@";
}
wfish() { ssh $ssh_opts root@${sfos_ip_addr_t} "$@"; }
rfish() { ssh $ssh_opts root@${sfos_ip_addr_r}  "$@"; }
tfish() { telnet             ${sfos_ip_addr_r}  "$@"; }

sfishscp() {
    if [ "x${1:-}" = "x-u" ]; then
        shift
        local rdest=$1
        shift
        scp "$@" root@$sfos_ipaddr:$rdest
    elif [ "x${1:-}" = "x-d" ]; then
        shift
        local ldest=$1
        shift
        scp root@$sfos_ipaddr:"$@" "$ldest"
    else
        errecho "USAGE:"\
              "afish scp <-u|-d> <r|ldest> <l|rfiles>\n"\
"              afish scp -u <rdest> <lfiles>\n"\
"              afish scp -d <ldest> <rfiles>"
    fi
}

_get_check_cmd() {
    local cmd=""

    printf "sfos_ipaddr: auto-detection\n\\_using cmd: " >&2
    if which timeout >/dev/null && which telnet; then
        # telnet 0m0.050s (0m0.105s) is faster than culr
        cmd='timeout 1 telnet $ip 22 2>/dev/null | grep -q "to $ip"'
    elif which curl; then
        # curl 0m0.095s (0m0.197s) is faster than netcat
        curlcmd='curl --connect-timeout 1 -sv'
        cmd=$curlcmd' telnet://$ip:22 2>&1 | grep -q "to $ip"'
    elif which nc; then
        # netcat 0m0.111s (0m0.200s) is faster than wget
        cmd='nc -w 1 $ip 22 | grep -qi openssh'
    elif which wget; then
        # wget 0m0.122s (0m0.211s) is way faster than nmap
        cmd='wget -t1 -T1 $ip:22 2>&1 | grep -q " $ip"'
# RAF: to slooow sometimws, 13s
#   elif which nmap; then
#       # nmap 0m0.256s (0m0.326s) is faster than ssh
#       cmd='nmap --host-timeout 1 $ip -PN -p 22 | grep -q open'
    elif which ssh; then
        # ssh 0m0.541s (0m0.498s) is the slowest command
        local cmd_opts="-o PasswordAuthentication=no -o ConnectTimeout=1"
        cmd_opts="$cmd_opts -o StrictHostKeyChecking=no -o BatchMode=yes"
        cmd='ssh -qn '$cmd_opts' root@$ip echo root | grep -q "^root"'
    fi >&2

    echo "$cmd &&"

}

_runinbg() {(set +e
        echo quit | {
            eval exec -a $cmd_tag "$@" echo $ip >$fifo_name &
        }
        disown &>/dev/null ||:
)}

afish_getip() {
    local cmd="$(_get_check_cmd)"
    local ip fifo_name ipaddr="" cmd_tag="sshcontest"
    local iplist="$sfos_ipaddr ${sfos_ip_addr_u}
        ${sfos_ip_addr_t} ${sfos_ip_addr_r}"

    if [ ! -z "$cmd" ]; then
        fifo_name=$(mktemp -up ${TMPDIR:-/tmp} fifo.XXXXXX)
        if mkfifo "$fifo_name"; then
            for ip in $iplist; do
                _runinbg "$cmd"
            done
            ip="" _runinbg "sleep 3;"
            read ipaddr < "$fifo_name"
            {
                pkill -f $cmd_tag && \
                pkill -9 -f $cmd_tag ||:
            } 2>/dev/null
            rm -f "$fifo_name"
        fi
    fi

    export sfos_ipaddr=$ipaddr
    echo "sfos_ipaddr: ${ipaddr:-not found}" >&2
    test -n "$ipaddr"
}

# RAF: this is the function alternative to afish_getip when set -m is not work.
#      However, because the background jobs are not managed by the shell, but
#      giving them a tag (thread name) to kill later, this function is just for
#      the development history record.
#
_alt_afish_getip() {
    echo -e "\nWARNING: please, use afish_getip() instead.\n"
    return 1

    local ip fifo_name ipaddr="" cmd_tag="sshcontest" cmd="$(_get_check_cmd)"
    local iplist="$sfos_ipaddr ${sfos_ip_addr_u}
        ${sfos_ip_addr_t} ${sfos_ip_addr_r}"

    if [ ! -z "$cmd" ]; then
        for ip in $iplist; do
            echo quit | eval $cmd && break
            ip=""
        done
    fi

    sfos_ipaddr=$ip
    echo sfos_ipaddr: ${ip:-not found} >&2
    test -n "$ip"
}

sfish() {
    if [ -n "${1:-}" ]; then
        test "x${1/d/u}" = "x-u" && { sfishscp "$@"; return $?; }
        test "$1" = "scp" && { shift; sfishscp "$@"; return $?; }
    fi
    ssh -q $ssh_opts root@$sfos_ipaddr "$@"
}

afish() {
    afish_getip || return 1
    test "${1:-}" = "getip" -o "x${1:-}" = "x--ip" && return 0
    sfish "$@"
}

ufish_devtether() {
    echo "devel USB tethering on/off switch"

    local scrname='$HOME/bin/setnet_postroute.sh'
    if ! ufish "$scrname -s"; then
        echo
        echo "ERROR: $scrname failed, abort."
        echo
        echo "Run rfos-suite-installer.sh, before?"
        echo
        return 1
    fi >&2

    local cmd ip="${sfos_ip_addr_u}" routecmd='sudo route $cmd default gw $ip'
    if route -n | grep -qe "^[0-9.]* *$ip .* UG "; then
        cmd="del"
    else
        cmd="add"
    fi
    eval echo "'=>' $routecmd" && eval sudo $routecmd
    echo; route -n | sed -e "s/^/   /"; echo
    return $?
}

ask_to_stop_mobile_data() {
    local ret tmpfile=$(mktemp -p ${TMPDIR:-/tmp} -t ask2stmd.XXXXXX)
    while true; do
        echo
        echo "=> Check mobile data connection on device..."

        afish_getip 2>$tmpfile
        sed -e "s/^/   /" $tmpfile ||:
        rm -f $tmpfile
        # This part cannot be interrupted # ************************************
        stty -echoctl 2>/dev/null ||:; trap 'true' SIGINT
        ret=0; ssh $ssh_opts root@$sfos_ipaddr ifconfig -a -s |\
            grep -qe "rmnet_data[1-2] .*RU" || ret=$?
        stty echoctl 2>/dev/null ||:; trap - SIGINT
        # **********************************************************************

        printf "   \_ mobile data: "
        if [ $ret -ne 0 ]; then
            echo "none"
            break
        fi
        echo "active"
        echo
        echo "WARNING: please, deactive mobile data on the samrtphone"
        echo "         restore should be use the USB connection, only"
        echo
        echo "         Press ENTER to retry or CTRL-C to stop"
        sleep 1
        read
    done
    return 0
}

# this return is useful for creating an executable patch for Web Catalog
return $? 2>/dev/null ||:
