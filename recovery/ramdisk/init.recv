#!/bin/sh
##############################################################################
#
# This file is part of Jolla recovery console, RAF reworked
#
# Copyright (C) 2013-2015 Jolla Ltd.
#     Originally written by Andrea Bernabei
#     Contact: Igor Zhbanov <igor.zhbanov@jolla.com>
# Copyright (C) 2023, Roberto A. Foglietta
#     Contact: roberto.foglietta@gmail.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
##############################################################################
# release: 0.0.2

exec 2>/boot.log

export PATH=/sbin:/bin:/usr/bin:/usr/sbin

ANDROID_USB=/sys/class/android_usb/android0
GADGET_DIR=/config/usb_gadget

LOCAL_IP=10.42.66.66
USB_FUNCTIONS=rndis
G_USB_ISERIAL=

write()
{
    echo -n "$2" > $1
}

# This sets up the USB with whatever USB_FUNCTIONS are set to via configfs
usb_setup_configfs() {
    G_USB_ISERIAL="$GADGET_DIR/g1/strings/0x409/serialnumber"

    g_usb_g1_dir="$GADGET_DIR/g1"
    g_usb_g1_func_dir="$g_usb_g1_dir/functions"
    g_usb_g1_c1_dir="$g_usb_g1_dir/configs/c.1"
    g_usb_g1_0x409_dir="$g_usb_g1_c1_dir/strings/0x409"

    mkdir -p $g_usb_g1_dir/strings/0x409
    write $g_usb_g1_dir/idVendor                   "0x2931"
    write $g_usb_g1_dir/idProduct                  "0x0A06"
    write $g_usb_g1_dir/strings/0x409/serialnumber "$1"
    write $g_usb_g1_dir/strings/0x409/manufacturer "Jolla"
    write $g_usb_g1_dir/strings/0x409/product      "Recovery"

    if echo $USB_FUNCTIONS | grep -q "rndis"; then
        mkdir -p $g_usb_g1_func_dir/rndis.rndis0
        mkdir -p $g_usb_g1_func_dir/rndis_bam.rndis
    fi

    mkdir -p $g_usb_g1_0x409_dir
    write $g_usb_g1_dir/configuration "$USB_FUNCTIONS"

    if echo $USB_FUNCTIONS | grep -q "rndis"; then
        ln -s $g_usb_g1_func_dir/rndis.rndis0 $g_usb_g1_c1_dir
        ln -s $g_usb_g1_func_dir/rndis_bam.rndis $g_usb_g1_c1_dir
    fi

    echo "$(ls /sys/class/udc)" > $g_usb_g1_dir/UDC
}

# This sets up the USB with whatever USB_FUNCTIONS are set to via android_usb
usb_setup_android_usb() {
    G_USB_ISERIAL=$ANDROID_USB/iSerial
    write $ANDROID_USB/enable          0
    write $ANDROID_USB/functions       ""
    write $ANDROID_USB/enable          1
    usleep 500000 # 0.5 delay to attempt to remove rndis function
    write $ANDROID_USB/enable          0
    write $ANDROID_USB/idVendor        2931
    write $ANDROID_USB/idProduct       0A06
    write $ANDROID_USB/iManufacturer   "Jolla"
    write $ANDROID_USB/iProduct        "Recovery"
    write $ANDROID_USB/iSerial         "$1"
    write $ANDROID_USB/functions       $USB_FUNCTIONS
    write $ANDROID_USB/enable          1
}

# This determines which USB setup method is going to be used
usb_setup() {
    if [ -f $ANDROID_USB/enable ]; then
        usb_setup_android_usb $1
    else
        usb_setup_configfs $1
    fi
}

usb_info() {
    # make sure USB is settled
    echo -e "##### usb_info #####\n$1"
    sleep 1
    write $G_USB_ISERIAL "$1"
}

ldconfig

set -o allexport
if [ -s /etc/sysconfig/display ]; then
    . /etc/sysconfig/display
fi
if [ -s /usr/bin/recovery-functions.sh ]; then
    . /usr/bin/recovery-functions.sh
fi
if [ -s /etc/sysconfig/print_banner.env ]; then
    . /etc/sysconfig/print_banner.env
fi
set +o allexport

echo "Doing mounts... "

mkdir -p /tmp
mount -t tmpfs tmpfs /tmp

mkdir -p /run
mount -t tmpfs tmpfs /run

mkdir -p /proc
mount -t proc proc /proc

mkdir -p /sys
mount -t sysfs sys /sys

mkdir -p /dev
mount -t devtmpfs devtmpfs /dev
mkdir -p /dev/pts

mkdir -p /config
mount -t configfs none /config

mount -a

# Some filesystem tools may need mtab to work
cat /proc/mounts > /etc/mtab

#Run mdev
echo "RAF SFOS debug running mdev..."
mdev -s

#Set mdev as hotplug manager
echo /bin/mdev > /proc/sys/kernel/hotplug

if [ ! -z "$DISPLAY_BRIGHTNESS_PATH" -a ! -z "$DISPLAY_BRIGHTNESS" ]; then
    # Minimize power consumption by lowering display brightness to minimum
    write $DISPLAY_BRIGHTNESS_PATH $DISPLAY_BRIGHTNESS
fi

usb_setup "RAF SFOS debug setting up..."

ip link set usb0 up
ip link set rndis0 up
if ipaddr add 10.42.66.66/29 broadcast 10.42.66.255 dev rndis0 ; then
    USB_IFACE=rndis0
elif ipaddr add 10.42.66.66/29 broadcast 10.42.66.255 dev usb0 ; then
    USB_IFACE=usb0
elif true; then
    dmesg
    sleep 60 # plenty long enough to check usb on host
    reboot -f
else
# RAF: if not connected then it does the normal boot
    usb_info "RAF SFOS debug goes for normal boot"
    ip link set rndis0 down
    ip link set usb0 down
    killall mdev
    umount -l /config
    umount -l /dev
    umount -l /sys
    umount -l /proc
    umount -l /run
    umount -l /tmp
    umount -l -a
    cat /proc/mounts > /etc/mtab
    . /init.boot
    exit $?
fi

ipaddr add 192.168.2.15/24 broadcast 192.168.2.255 dev $USB_IFACE \
    label rndis0:0

sed -i "s/@IFACE@/$USB_IFACE/g" /etc/udhcpd.conf
udhcpd

usb_info "Jolla Debug telnet on $USB_IFACE $LOCAL_IP - also running udhcpd"

if true || [ -z "$ipnum_10" ]; then
    yamui -m 1 -t "RECOVERY: Connect USB cable and open telnet to address $LOCAL_IP" &
else
    yamui -m 1 -t "$(print_banner $LOCAL_IP | sed -e 's/^/  /' -e 's/$/\r/')" &
fi

# Remove recovery-menu lock if the /var/run is not on tmpfs.
remove_lock

echo "Starting telnetd..."
telnetd -l/usr/bin/recovery-menu &

echo "Starting yamui-screensaverd..."
/usr/bin/yamui-screensaverd &

# #############################################################################
# Magic Close feature:
#
# If a driver supports "Magic Close", the driver will not disable the
# watchdog unless a specific magic character 'V' has been sent to
# /dev/watchdog just before closing the file.  If the userspace daemon
# closes the file without sending this special character, the driver
# will assume that the daemon (and userspace in general) died, and will
# stop pinging the watchdog without disabling it first.  This will then
# cause a reboot if the watchdog is not re-opened in sufficient time.
#
# Source: https://www.kernel.org/doc/Documentation/watchdog/watchdog-api.txt
#
# Reset watchdog timer
echo V > /dev/watchdog

# wait for a day
sleep 86400
