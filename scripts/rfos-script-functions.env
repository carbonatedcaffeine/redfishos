#!/bin/sh
################################################################################
#
# Copyright (C) 2023, Roberto A. Foglietta <roberto.foglietta@gmail.com>
#                     Released under GPLv2 license terms
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
################################################################################
# release: 0.1.1

isafunc() {
    test -n "${1:-}" || return 1
    type $1 2>&1 | head -n1 | grep -q "is a function"
}

errecho() {
    if [ -n "${1:-}" ]; then
        echo -e "\n ERROR: $@\n"
    fi >&2
    return 1
}

errexit() {
    errecho "$@"
    exit 1
}

printline() { printf -- "${1:--}%.0s" $(seq 1 ${2:-80}); printf "\n"; }

download() {
    test -n "${2:-}" || return 1
    if which wget >/dev/null; then
        wget $1 -qO  $2; sync $2
    elif which curl >/dev/null; then
        curl -sL $1 >$2; sync $2
    else
        return 1
    fi
}

src_file_env() {
    local i j srcfile="" path=$(echo "/usr/bin/:$PATH" | tr ':' ' ')
    path="${HOME:+$HOME/bin} ${SUDO_USER:+/home/$SUDO_USER/bin} $path"

    if [ "${1:-}" != "" ]; then
        for i in "" .env; do
            for j in $(dirname $0) $path; do
                srcfile="$j/$1$i"
                test -r "$srcfile" && break
            done
        done
    fi

    if [ ! -r "$srcfile" ]; then
        errecho "ERROR: ${srcfile:-missing parameter, required .env filename}"\
" ${srcfile:+not found}, abort."
        return 1
    fi >&2
    source "$srcfile"
}

set_battery_threshold() {
    if [ ! -n "${1:-}" -o ${1:-1} -lt 70 -o ${1:-1} -gt 100 ]; then
        echo
        echo "USAGE: set_battery_threshold <70-100>"
        echo
        return 1
    fi
    local up=$1 dn=$(($1-5)) pc="apply-thresholds"
    if [ $1 -eq 100 ]; then
        pc="enable"
        dn=100
    fi
    echo
    echo 1   >/sys/class/power_supply/battery_ext/lrc_enable
    echo $up >/sys/class/power_supply/battery_ext/lrc_socmax
    echo $dn >/sys/class/power_supply/battery_ext/lrc_socmin
    echo 1   >/sys/class/power_supply/battery/lrc_enable
    grep .    /sys/class/power_supply/battery*/lrc_* | tr : =
    echo
    mcetool \
        --set-forced-charging=disabled   \
        --set-charging-enable-limit=$up  \
        --set-charging-disable-limit=$dn \
        --set-charging-mode=$pc
    mcetool | grep -i charging
    echo
}

shellname() {
    local shn shx
    shn=$(cat /proc/$$/cmdline | tr '\0' '\n' | grep -v busybox | head -n1)
    if [ -x "$shn" ]; then
        shx=$(basename "$shn")
        shn=$(readlink -f "$shn")
        shn=$(basename "$shn")
        if [ "$shn" = "busybox" ]; then
            shn=$shx
        fi
    fi
    echo $shn
}

dstats() {
    which dool >/dev/null || return 1
    dool --time --cpu --proc --mem --page --disk --top-cpu --top-io --top-mem
}

def_undef_func() {
    local func_body="" IFS line
    test -n "${1:-}" || return 1
    if ! type $1 2>&1 | head -n1 | grep -q "$1 is a function"; then
        test $fd -eq 0 && echo; fd=1
        echo "function define $1()"
        while IFS= read -r line; do func_body="$func_body
$line"; done
        eval "$func_body"
        return $?
    fi
    return 1
}

